{
	"info": {
		"_postman_id": "7df0025c-d974-4593-9152-46b15159395d",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35021292",
		"_collection_link": "https://trello-team-3867.postman.co/workspace/MyFirstWorkSpace~cb81aeb8-caae-4246-8116-e6a45a4431c0/collection/35021292-7df0025c-d974-4593-9152-46b15159395d?action=share&source=collection_link&creator=35021292"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct page name\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"pm.test(\"Dizin icindeki ilk ID\", function () {\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"     pm.expect(jsonData.data[0].id).to.eql(7);\r",
							"});\r",
							"\r",
							"// Parse the response body\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Search for \"George\" in the data array\r",
							"let george = response.data.find(user => user.first_name === 'George');\r",
							"\r",
							"// If George is found, log the data to the console\r",
							"if (george) {\r",
							"    console.log(\"George's Data:\", george);\r",
							"    pm.test(\"George found\", function() {\r",
							"        pm.expect(george.first_name).to.eql('George');\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"George not found\", function() {\r",
							"        pm.expect(george).to.not.be.null;\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/users?page=2",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Single User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"UserID\", 3);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"pm.test(\"ayni mi\", function() {\r",
							"    pm.expect(responseData.data.id).to.eql(\"UserID\");\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/users/{{UserID}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users",
						"{{UserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/users/23",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List <resource>",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/unknown",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <resource>",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/unknown/2",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <resource> not found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/unknown/23",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"lastname\": \"Matrix\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/users",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/users/2",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update(patch)",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/users/2",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/users/451",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users",
						"451"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - successful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/register",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - unsuccessful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/register",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - successful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/login",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - unsuccessful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/login",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed response",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/users?delay=3",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 3 seconds\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
					"});\r",
					""
				]
			}
		}
	]
}